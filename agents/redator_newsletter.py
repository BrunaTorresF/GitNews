from datetime import datetime
from pathlib import Path
import json
from models.state import NewsletterState
from utils.file_manager import save_newsletter
from config.settings import OPENROUTER_CONFIG
import logging

# Configura√ß√£o do logger espec√≠fico para o redator de newsletter
logger = logging.getLogger("newsletter_generator.redator")

#=============================================================================
# CONSTANTES E CONFIGURA√á√ïES E PROMPTS
#=============================================================================

# Constantes para prompts de se√ß√µes
SECTION_PROMPTS = {
    "newsletter_title": """## SantaNews üì∞""",

    "destaques": """Crie uma se√ß√£o de destaques para a newsletter, apresentando os pontos mais importantes do reposit√≥rio.
Siga EXATAMENTE esta estrutura para cada destaque:

### 1. **Problema real resolvido**  
üìä [Uma frase ESPEC√çFICA descrevendo o problema que o projeto resolve, mencionando tecnologias ou conceitos REAIS do reposit√≥rio]  
üí° **Por que isso importa?** [Uma frase explicando a import√¢ncia com exemplos CONCRETOS]  

---

### 2. **Relev√¢ncia tecnol√≥gica**  
üîó [Uma frase sobre a relev√¢ncia tecnol√≥gica, mencionando ESPECIFICAMENTE as tecnologias usadas no reposit√≥rio]  
üìà **Por que isso √© relevante?** [Uma frase explicando a relev√¢ncia com DADOS CONCRETOS]  

---

### 3. **Aspecto t√©cnico ou usabilidade**  
üß© [Uma frase sobre um aspecto t√©cnico ou de usabilidade, citando COMPONENTES REAIS do projeto]  
üõ†Ô∏è **Por que isso √© importante?** [Uma frase explicando a import√¢ncia com EXEMPLOS ESPEC√çFICOS (se der informa√ß√µes com n√∫meros ou fatosprecisa dar a fonte)]  

---

### üéØ **Conclus√£o: [T√≠tulo da conclus√£o]**  
[Um par√°grafo curto resumindo os destaques, mencionando o nome do reposit√≥rio e suas caracter√≠sticas reais] üöÄ‚ú®

IMPORTANTE:
1. N√ÉO use descri√ß√µes gen√©ricas que poderiam se aplicar a qualquer projeto similar.
2. CITE NOMES ESPEC√çFICOS de tecnologias, arquivos, fun√ß√µes ou componentes que existem no reposit√≥rio.
3. Se n√£o tiver informa√ß√µes suficientes, ADMITA EXPLICITAMENTE a limita√ß√£o em vez de inventar.
4. N√ÉO mencione funcionalidades ou integra√ß√µes a menos que tenha evid√™ncias concretas de que existem.
5. N√ÉO altere esta estrutura. N√ÉO adicione mais destaques. N√ÉO repita informa√ß√µes b√°sicas que j√° est√£o na se√ß√£o de vis√£o geral.""",
    
    "casos_uso": """Crie uma se√ß√£o de casos de uso pr√°ticos para o reposit√≥rio.
Siga EXATAMENTE esta estrutura:

## Casos de Uso Pr√°ticos: Onde o **[Nome do Reposit√≥rio]** brilha ‚ú®

O projeto **[Nome do Reposit√≥rio]** n√£o √© apenas um exemplo t√©cnico, mas uma solu√ß√£o pr√°tica para diversos desafios reais. Abaixo, exploramos tr√™s cen√°rios onde ele pode fazer a diferen√ßa:

---

### 1. **[T√≠tulo do caso de uso: setor ou contexto]**  
**Problema:** [Descri√ß√£o do problema em 2 frases]  
**Solu√ß√£o:** [Como o projeto resolve o problema em 2-3 frases]  
**Benef√≠cios:**  
- [Benef√≠cio 1]  
- [Benef√≠cio 2]  
- [Benef√≠cio 3]  
**Perfis que se beneficiam:** [Lista de perfis ou fun√ß√µes]  

---

### 2. **[T√≠tulo do caso de uso: setor ou contexto]**  
**Problema:** [Descri√ß√£o do problema em 2 frases]  
**Solu√ß√£o:** [Como o projeto resolve o problema em 2-3 frases]  
**Benef√≠cios:**  
- [Benef√≠cio 1]  
- [Benef√≠cio 2]  
- [Benef√≠cio 3]  
**Perfis que se beneficiam:** [Lista de perfis ou fun√ß√µes]  

---

### 3. **[T√≠tulo do caso de uso: setor ou contexto]**  
**Problema:** [Descri√ß√£o do problema em 2 frases]  
**Solu√ß√£o:** [Como o projeto resolve o problema em 2-3 frases]  
**Benef√≠cios:**  
- [Benef√≠cio 1]  
- [Benef√≠cio 2]  
- [Benef√≠cio 3]  
**Perfis que se beneficiam:** [Lista de perfis ou fun√ß√µes]  

---

### Por que isso importa? üåç  
[Um par√°grafo curto explicando a import√¢ncia geral] üöÄ  

Pronto para implementar? Acesse o reposit√≥rio e descubra como ele pode transformar o seu fluxo de trabalho! üîó

N√ÉO altere esta estrutura. N√ÉO adicione mais casos de uso. N√ÉO repita informa√ß√µes b√°sicas que j√° est√£o na se√ß√£o de vis√£o geral.""",
    
    "glossario": """Crie uma se√ß√£o de gloss√°rio acess√≠vel para a newsletter.
Siga EXATAMENTE esta estrutura:

[Incluir emojis para cada Termo que combinar com o significado]

**[Termo 1]** 
[Defini√ß√£o breve e simples sobre o que √© em 1-2 frases]  

**[Termo 2]**   
[Defini√ß√£o breve e simples sobre o que √© em 1-2 frases]  

**[Termo 3]**   
[Defini√ß√£o breve e simples sobre o que √© em 1-2 frases]  

**[Termo 4]**  
[Defini√ß√£o breve e simples sobre o que √© em 1-2 frases]  

**[Termo 5]**   
[Defini√ß√£o breve e simples sobre o que √© em 1-2 frases]  

Agora voc√™ est√° pronto para entender tudo sobre o projeto! üöÄ

N√ÉO altere esta estrutura. N√ÉO adicione mais termos. Escolha apenas os 5 termos t√©cnicos mais relevantes para o projeto.""",
}

# Prompt do sistema para o redator - define o comportamento e restri√ß√µes da LLM
SYSTEM_PROMPT_REDATOR = """Voc√™ √© um redator especializado em comunica√ß√£o t√©cnica inclusiva.
Sua fun√ß√£o √© transformar conte√∫do t√©cnico em material acess√≠vel, pr√°tico e relevante para diversos p√∫blicos.
Voc√™ deve seguir EXATAMENTE as estruturas fornecidas nos prompts para cada se√ß√£o, sem altera√ß√µes.
N√£o adicione se√ß√µes extras, n√£o modifique a formata√ß√£o solicitada e n√£o crie conte√∫do fora do escopo definido.

IMPORTANTE: 
1. Siga rigorosamente a estrutura fornecida para cada se√ß√£o.
2. N√£o repita informa√ß√µes b√°sicas que j√° est√£o na se√ß√£o de vis√£o geral da newsletter.
3. Use linguagem clara e acess√≠vel, evitando jarg√µes t√©cnicos desnecess√°rios.
4. Mantenha-se fiel aos dados fornecidos sobre o reposit√≥rio, sem inventar funcionalidades ou caracter√≠sticas.
5. Use os emojis e formata√ß√£o exatamente como indicado nos templates."""

#=============================================================================
# FUN√á√ïES DE GERA√á√ÉO DE CONTE√öDO
#=============================================================================

def gerar_secao_llm(prompt: str, enhanced_content: str, basic_content: str) -> str:
    """
    Gera uma se√ß√£o espec√≠fica usando a LLM.
    
    Args:
        prompt: Prompt espec√≠fico para a se√ß√£o a ser gerada
        enhanced_content: Conte√∫do aprimorado para refer√™ncia
        basic_content: Conte√∫do b√°sico j√° presente na newsletter
        
    Returns:
        Texto da se√ß√£o gerada pela LLM ou string vazia em caso de erro
    """

    try:
        logger.info("Iniciando gera√ß√£o de se√ß√£o com LLM")
        
        # Construir o prompt do usu√°rio combinando instru√ß√µes espec√≠ficas com conte√∫dos de refer√™ncia
        user_prompt = f"""Com base no conte√∫do fornecido, crie uma se√ß√£o espec√≠fica para a newsletter.

{prompt}

Conte√∫do b√°sico j√° presente na newsletter (N√ÉO REPITA ESTAS INFORMA√á√ïES):
{basic_content[:1000]}  # Limita o conte√∫do b√°sico para evitar prompts muito longos

Conte√∫do base para refer√™ncia e an√°lise:
{enhanced_content[:3000]}"""  # Limita o conte√∫do de refer√™ncia para evitar prompts muito longos
        
        # Preparar mensagens para o chat no formato esperado pela API
        messages = [
            {"role": "system", "content": SYSTEM_PROMPT_REDATOR},
            {"role": "user", "content": user_prompt}
        ]
        
        logger.debug(f"Enviando requisi√ß√£o para API com prompt de {len(user_prompt)} caracteres")
        # Fazer requisi√ß√£o para a API
        success, result = OPENROUTER_CONFIG.make_request(messages)
        
        # Verificar se a requisi√ß√£o foi bem-sucedida
        if not success:
            logger.error(f"Erro ao gerar se√ß√£o: {result}")
            return ""  # Retorna string vazia em caso de erro
        
        logger.info("Se√ß√£o gerada com sucesso")
        logger.debug(f"Resposta recebida com {len(result['choices'][0]['message']['content'])} caracteres")
        
        # Extrai e retorna o conte√∫do gerado pela LLM
        return result['choices'][0]['message']['content']
        
    except Exception as e:
        # Captura qualquer exce√ß√£o n√£o tratada para evitar falhas na pipeline
        logger.error(f"Erro ao gerar se√ß√£o com LLM: {str(e)}", exc_info=True)
        return ""

#=============================================================================
# FUN√á√ïES DE VALIDA√á√ÉO DE CONTE√öDO
#=============================================================================

def validar_secao(secao_nome: str, conteudo: str, repo_data: dict = None) -> bool:
    """
    Valida se o conte√∫do da se√ß√£o segue o formato esperado e tem qualidade adequada.
    
    Args:
        secao_nome: Nome da se√ß√£o a ser validada
        conteudo: Conte√∫do gerado pela LLM
        repo_data: Dados do reposit√≥rio para valida√ß√£o de conte√∫do
        
    Returns:
        bool: True se o conte√∫do for v√°lido, False caso contr√°rio
    """
    logger.info(f"Validando se√ß√£o: {secao_nome}")
    
    # Valida√ß√£o b√°sica de tamanho m√≠nimo para qualquer se√ß√£o
    if not conteudo or len(conteudo) < 50:
        logger.warning(f"Conte√∫do da se√ß√£o '{secao_nome}' muito curto ou vazio")
        return False
    
    # Valida√ß√µes espec√≠ficas para cada tipo de se√ß√£o
    if secao_nome == "destaques":
        # Verificar se cont√©m os 3 destaques e a conclus√£o
        if not "### 1. **" in conteudo or not "### 2. **" in conteudo or not "### 3. **" in conteudo:
            logger.warning(f"Se√ß√£o '{secao_nome}' n√£o cont√©m os 3 destaques esperados")
            return False
        if not "### üéØ **Conclus√£o:" in conteudo:
            logger.warning(f"Se√ß√£o '{secao_nome}' n√£o cont√©m a conclus√£o esperada")
            return False
            
        # Verificar se o conte√∫do √© espec√≠fico o suficiente usando dados do reposit√≥rio
        if repo_data:
            # Lista de termos gen√©ricos que indicam conte√∫do vago ou gen√©rico demais
            termos_genericos = [
                "o projeto resolve", "o sistema permite", "a aplica√ß√£o oferece",
                "essa abordagem", "essa organiza√ß√£o", "essa estrutura",
                "desenvolvedores que buscam", "empresas que precisam"
            ]
            
            # Contar ocorr√™ncias de termos gen√©ricos para avaliar especificidade
            contagem_genericos = sum(1 for termo in termos_genericos if termo.lower() in conteudo.lower())
            
            # Se tiver muitos termos gen√©ricos, considera o conte√∫do vago demais
            if contagem_genericos > 3:
                logger.warning(f"Se√ß√£o '{secao_nome}' cont√©m muitos termos gen√©ricos ({contagem_genericos})")
                return False
                
            # Verificar se menciona o nome do reposit√≥rio - crit√©rio de relev√¢ncia
            if repo_data.get('name') and repo_data['name'].lower() not in conteudo.lower():
                logger.warning(f"Se√ß√£o '{secao_nome}' n√£o menciona o nome do reposit√≥rio")
                return False
                
            # Verificar se menciona tecnologias espec√≠ficas - crit√©rio de especificidade
            if repo_data.get('language') and repo_data['language'].lower() not in conteudo.lower():
                logger.warning(f"Se√ß√£o '{secao_nome}' n√£o menciona a linguagem principal do reposit√≥rio")
                return False
            
    elif secao_nome == "casos_uso":
        # Verificar se cont√©m os 3 casos de uso conforme estrutura definida
        if not "### 1. **" in conteudo or not "### 2. **" in conteudo or not "### 3. **" in conteudo:
            logger.warning(f"Se√ß√£o '{secao_nome}' n√£o cont√©m os 3 casos de uso esperados")
            return False
        # Verificar se cada caso de uso tem os elementos obrigat√≥rios
        if not "**Problema:**" in conteudo or not "**Solu√ß√£o:**" in conteudo or not "**Benef√≠cios:**" in conteudo:
            logger.warning(f"Se√ß√£o '{secao_nome}' n√£o segue a estrutura esperada para casos de uso")
            return False
            
    elif secao_nome == "glossario":
        # Verificar se cont√©m pelo menos 5 termos no gloss√°rio
        termo_count = conteudo.count("**[") + conteudo.count("**") // 2
        if termo_count < 5:
            logger.warning(f"Se√ß√£o '{secao_nome}' cont√©m apenas {termo_count} termos, esperados 5")
            return False
    
    # Se passou por todas as valida√ß√µes, considera o conte√∫do v√°lido
    logger.info(f"Se√ß√£o '{secao_nome}' validada com sucesso")
    return True

#=============================================================================
# MECANISMO DE GERA√á√ÉO COM CONTROLE DE QUALIDADE E RETENTATIVAS
# USA FUN√á√ÉO DE GERA√á√ÉO COM LLM(gerar_secao_llm) E FUN√á√ÉO DE VALIDA√á√ÉO DE CONTE√öDO(validar_secao) 
#=============================================================================

def gerar_secao_com_validacao(secao_nome: str, prompt: str, enhanced_content: str, basic_content: str, repo_data: dict = None, max_tentativas: int = 3) -> str:
    """
    Gera uma se√ß√£o e valida se ela segue o formato esperado.
    Tenta novamente at√© max_tentativas vezes se a valida√ß√£o falhar.
    
    Args:
        secao_nome: Nome da se√ß√£o a ser gerada
        prompt: Prompt para a LLM
        enhanced_content: Conte√∫do aprimorado para refer√™ncia
        basic_content: Conte√∫do b√°sico j√° presente na newsletter
        repo_data: Dados do reposit√≥rio para valida√ß√£o de conte√∫do
        max_tentativas: N√∫mero m√°ximo de tentativas
        
    Returns:
        str: Conte√∫do da se√ß√£o gerada
    """
    # Loop de tentativas para gerar conte√∫do v√°lido
    for tentativa in range(1, max_tentativas + 1):
        logger.info(f"Gerando se√ß√£o '{secao_nome}' - Tentativa {tentativa}/{max_tentativas}")
        
        # Gerar se√ß√£o usando a LLM
        conteudo = gerar_secao_llm(prompt, enhanced_content, basic_content)
        
        # Validar o conte√∫do gerado usando crit√©rios espec√≠ficos
        if validar_secao(secao_nome, conteudo, repo_data):
            logger.info(f"Se√ß√£o '{secao_nome}' gerada e validada com sucesso na tentativa {tentativa}")
            return conteudo
        
        logger.warning(f"Se√ß√£o '{secao_nome}' n√£o passou na valida√ß√£o. Tentativa {tentativa}/{max_tentativas}")
        
        # Se for a √∫ltima tentativa, retorna o melhor resultado dispon√≠vel mesmo que n√£o seja ideal
        if tentativa == max_tentativas:
            logger.warning(f"N√∫mero m√°ximo de tentativas atingido para se√ß√£o '{secao_nome}'. Retornando √∫ltimo resultado dispon√≠vel.")
            return conteudo
    
    # Cl√°usula de seguran√ßa - n√£o deveria chegar aqui devido ao retorno dentro do loop
    return ""

#=============================================================================
# FUN√á√ÉO PRINCIPAL DE REDA√á√ÉO DA NEWSLETTER
#=============================================================================

def redigir_newsletter(state: NewsletterState) -> NewsletterState:
    """
    Redige a newsletter final combinando o conte√∫do b√°sico com a an√°lise gerada pelo LLM,
    adiciona se√ß√µes espec√≠ficas e salva o resultado em um arquivo.
    
    Args:
        state: Estado atual contendo o conte√∫do b√°sico, an√°lise aprimorada e dados do reposit√≥rio
        
    Returns:
        Estado atualizado com o conte√∫do formatado da newsletter, caminho do arquivo de sa√≠da
        e m√©tricas de gera√ß√£o, ou mensagem de erro em caso de falha
    """
    try:
        logger.info("Iniciando processo de reda√ß√£o da newsletter")
        
        #=============================================================================
        # VALIDA√á√ÉO DE DADOS DE ENTRADA
        #=============================================================================
        
        # Verifica se o conte√∫do b√°sico est√° presente no estado
        if not state.get('content'):
            error_msg = "Conte√∫do b√°sico n√£o encontrado no estado"
            logger.error(error_msg)
            return {
                **state,
                'error': error_msg
            }
            
        # Verifica se a an√°lise aprimorada est√° presente no estado
        if not state.get('enhanced_content'):
            error_msg = "An√°lise de conte√∫do n√£o encontrada no estado"
            logger.error(error_msg)
            return {
                **state,
                'error': error_msg
            }
        
        # Extrai os dados do reposit√≥rio para uso nas fun√ß√µes de gera√ß√£o
        repo_data = state['repo_data']
        logger.info(f"Redigindo newsletter final para {repo_data['name']}")
        
        # Combinar o conte√∫do b√°sico com as se√ß√µes geradas
        basic_content = state['content']
        
        #=============================================================================
        # GERA√á√ÉO DAS SE√á√ïES ESPEC√çFICAS
        #=============================================================================
        
        logger.info("Gerando se√ß√µes espec√≠ficas da newsletter")
        # Dicion√°rio para armazenar as se√ß√µes geradas
        secoes = {}
        
        # Gera cada se√ß√£o definida nos prompts
        for nome, prompt in SECTION_PROMPTS.items():
            logger.info(f"Gerando se√ß√£o: {nome}")
            # Gera e valida o conte√∫do da se√ß√£o
            secao_conteudo = gerar_secao_com_validacao(nome, prompt, state['enhanced_content'], basic_content, repo_data)
            
            # Tratamento para caso de falha na gera√ß√£o
            if not secao_conteudo:
                logger.warning(f"Conte√∫do vazio gerado para a se√ß√£o '{nome}'. Usando placeholder.")
                secao_conteudo = f"[N√£o foi poss√≠vel gerar a se√ß√£o {nome}]"
                
            # Armazena a se√ß√£o gerada no dicion√°rio
            secoes[nome] = secao_conteudo
            logger.info(f"Se√ß√£o '{nome}' gerada com {len(secao_conteudo)} caracteres")
        
        #=============================================================================
        # MONTAGEM DO CONTE√öDO FINAL
        #=============================================================================
        
        # Divide o conte√∫do b√°sico para inserir as se√ß√µes antes da linha de separa√ß√£o final
        logger.debug("Dividindo conte√∫do b√°sico para inser√ß√£o das se√ß√µes")
        parts = basic_content.split('---')
        
        # Tratamento para formato inesperado do conte√∫do b√°sico
        if len(parts) < 2:
            logger.warning("Formato do conte√∫do b√°sico n√£o √© o esperado. Ajustando estrutura.")
            parts = [basic_content, ""]  # Cria uma estrutura padr√£o
        
        # Construir o conte√∫do formatado - agora sem repetir informa√ß√µes
        logger.info("Montando conte√∫do final da newsletter com todas as se√ß√µes")
        formatted_content = f"""{parts[0]}

## üîç Destaques
{secoes['destaques']}

## üí° Casos de Uso Pr√°ticos
{secoes['casos_uso']}

## üìò Gloss√°rio
{secoes['glossario']}

---
Newsletter gerada em {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"""
        
        #=============================================================================
        # SALVAMENTO E FINALIZA√á√ÉO
        #=============================================================================
        
        # Salva o conte√∫do usando o gerenciador de arquivos
        logger.info(f"Salvando newsletter para o reposit√≥rio {repo_data['name']}")
        try:
            # Utiliza fun√ß√£o externa para salvar o arquivo
            output_file = save_newsletter(formatted_content, repo_data['name'])
            logger.info(f"Newsletter salva com sucesso em {output_file}")
        except Exception as e:
            # Tratamento de erro espec√≠fico para falha no salvamento
            error_msg = f"Erro ao salvar newsletter: {str(e)}"
            logger.error(error_msg, exc_info=True)
            return {
                **state,
                'error': error_msg,
                'formatted_content': formatted_content  # Inclui o conte√∫do gerado mesmo com erro
            }
        
        #=============================================================================
        # C√ÅLCULO DE M√âTRICAS
        #=============================================================================
        
        # Calcula m√©tricas sobre o conte√∫do gerado para monitoramento no log
        total_caracteres = len(formatted_content)
        total_palavras = len(formatted_content.split())
        tamanho_secoes = {
            "destaques": len(secoes['destaques']),
            "casos_uso": len(secoes['casos_uso']),
            "glossario": len(secoes['glossario'])
        }
        
        # Registra m√©tricas no log
        logger.info(f"Newsletter gerada com {total_caracteres} caracteres e aproximadamente {total_palavras} palavras")
        logger.info(f"Tamanho das se√ß√µes: Destaques ({tamanho_secoes['destaques']} caracteres), " +
                   f"Casos de Uso ({tamanho_secoes['casos_uso']} caracteres), " +
                   f"Gloss√°rio ({tamanho_secoes['glossario']} caracteres)")
        logger.info(f"Processo de reda√ß√£o da newsletter conclu√≠do com sucesso para {repo_data['name']}")
        
        # Retorna o estado atualizado com o conte√∫do formatado, caminho do arquivo e m√©tricas
        return {
            **state,
            'formatted_content': formatted_content,
            'output_file': output_file,
            'metrics': {
                'total_caracteres': total_caracteres,
                'total_palavras': total_palavras,
                'tamanho_secoes': tamanho_secoes
            }
        }
        
    except Exception as e:
        # Captura qualquer exce√ß√£o n√£o tratada para evitar falhas na pipeline
        error_msg = f"Erro ao redigir newsletter: {str(e)}"
        logger.error(error_msg, exc_info=True)
        return {
            **state,
            'error': error_msg
        } 